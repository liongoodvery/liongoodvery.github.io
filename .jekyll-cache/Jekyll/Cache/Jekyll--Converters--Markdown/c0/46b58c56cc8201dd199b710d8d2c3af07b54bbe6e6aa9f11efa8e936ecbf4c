I"z,<h3 id="coding-rules">Coding Rules</h3>

<blockquote>
  <p>The first thing to do is call umask to set the file mode creation mask to 0.
Call fork and have the parent exit.
Call <code class="highlighter-rouge">setsid</code> to create a new session.
Change the current working directory to the root directory.
Unneeded file descriptors should be closed.
Some daemons open file descriptors 0, 1, and 2 to /dev/null so that any library routines that try to read from standard input or write to standard output or standard error will have no effect.</p>
</blockquote>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "apue.h"
#include &lt;syslog.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/resource.h&gt;
</span>
<span class="kt">void</span> <span class="nf">daemonize</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cmd</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span>                 <span class="n">i</span><span class="p">,</span> <span class="n">fd0</span><span class="p">,</span> <span class="n">fd1</span><span class="p">,</span> <span class="n">fd2</span><span class="p">;</span>
    <span class="n">pid_t</span>               <span class="n">pid</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">rlimit</span>       <span class="n">rl</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sigaction</span>    <span class="n">sa</span><span class="p">;</span>
    <span class="cm">/*
     * Clear file creation mask.
     */</span>
    <span class="n">umask</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="cm">/*
     * Get maximum number of file descriptors.
     */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">getrlimit</span><span class="p">(</span><span class="n">RLIMIT_NOFILE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rl</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">err_quit</span><span class="p">(</span><span class="s">"%s: can't get file limit"</span><span class="p">,</span> <span class="n">cmd</span><span class="p">);</span>

    <span class="cm">/*
     * Become a session leader to lose controlling TTY.
     */</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">err_quit</span><span class="p">(</span><span class="s">"%s: can't fork"</span><span class="p">,</span> <span class="n">cmd</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="cm">/* parent */</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">setsid</span><span class="p">();</span>

    <span class="cm">/*
     * Ensure future opens won't allocate controlling TTYs.
     */</span>
    <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">SIG_IGN</span><span class="p">;</span>
    <span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
    <span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGHUP</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">err_quit</span><span class="p">(</span><span class="s">"%s: can't ignore SIGHUP"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">err_quit</span><span class="p">(</span><span class="s">"%s: can't fork"</span><span class="p">,</span> <span class="n">cmd</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="cm">/* parent */</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="cm">/*
     * Change the current working directory to the root so
     * we won't prevent file systems from being unmounted.
     */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">chdir</span><span class="p">(</span><span class="s">"/"</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">err_quit</span><span class="p">(</span><span class="s">"%s: can't change directory to /"</span><span class="p">);</span>

    <span class="cm">/*
     * Close all open file descriptors.
     */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rl</span><span class="p">.</span><span class="n">rlim_max</span> <span class="o">==</span> <span class="n">RLIM_INFINITY</span><span class="p">)</span>
        <span class="n">rl</span><span class="p">.</span><span class="n">rlim_max</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rl</span><span class="p">.</span><span class="n">rlim_max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">close</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>

    <span class="cm">/*
     * Attach file descriptors 0, 1, and 2 to /dev/null.
     */</span>
    <span class="n">fd0</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">"/dev/null"</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
    <span class="n">fd1</span> <span class="o">=</span> <span class="n">dup</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">fd2</span> <span class="o">=</span> <span class="n">dup</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="cm">/*
     * Initialize the log file.
     */</span>
    <span class="n">openlog</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">LOG_CONS</span><span class="p">,</span> <span class="n">LOG_DAEMON</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fd0</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">fd1</span> <span class="o">!=</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">fd2</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">syslog</span><span class="p">(</span><span class="n">LOG_ERR</span><span class="p">,</span> <span class="s">"unexpected file descriptors %d %d %d"</span><span class="p">,</span>
               <span class="n">fd0</span><span class="p">,</span> <span class="n">fd1</span><span class="p">,</span> <span class="n">fd2</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>===</p>

<p><img src="../assets/img/BSDSyslogFacility.jpg" alt="The BSD syslog facility" /></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;syslog.h&gt;
</span>
<span class="kt">void</span> <span class="nf">openlog</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ident</span><span class="p">,</span> <span class="kt">int</span> <span class="n">option</span><span class="p">,</span> <span class="kt">int</span> <span class="n">facility</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">syslog</span><span class="p">(</span><span class="kt">int</span> <span class="n">priority</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">format</span><span class="p">,</span> <span class="p">...);</span>

<span class="kt">void</span> <span class="nf">closelog</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">setlogmask</span><span class="p">(</span><span class="kt">int</span> <span class="n">maskpri</span><span class="p">);</span>
</code></pre></div></div>
<ul>
  <li><code class="highlighter-rouge">ident</code> is normally the name of the program</li>
  <li><code class="highlighter-rouge">option</code> is a bitmask specifying various options . Probably one of <code class="highlighter-rouge">LOG_CONS</code>, <code class="highlighter-rouge">LOG_NDELAY</code>, <code class="highlighter-rouge">LOG_NOWAIT</code>, <code class="highlighter-rouge">LOG_ODELAY</code>, <code class="highlighter-rouge">LOG_PERROR</code>, and <code class="highlighter-rouge">LOG_PID</code>.</li>
  <li>The reason for the facility argument is to let the configuration file specify that messages from different facilities are to be handled differently.</li>
  <li>The priority argument is a combination of the <code class="highlighter-rouge">facility</code>  and a <code class="highlighter-rouge">level</code>, shown in Figure 13.5.</li>
</ul>

<h3 id="single-instance-daemons">Single-Instance Daemons</h3>

<h3 id="daemon-conventions">Daemon Conventions</h3>

<blockquote>
  <p>If the daemon uses a lock file, the file is usually stored in /var/run.The name of the file is usually name.pid.
If the daemon supports configuration options, they are usually stored in /etc. The configuration file is named name.conf.
Daemons can be started from the command line, but they are usually started from one of the system initialization scripts (/etc/rc* or /etc/init.d/*).
If a daemon has a configuration file, the daemon reads it when it starts, but usually won’t look at it again.</p>
</blockquote>
:ET