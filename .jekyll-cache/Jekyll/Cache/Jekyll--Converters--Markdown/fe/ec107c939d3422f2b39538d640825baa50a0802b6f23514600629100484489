I"g<h2 id="view的原理及简介">View的原理及简介</h2>

<ul>
  <li>view是屏幕上的某一块矩形的区域，所有的view都是矩形的</li>
  <li>activity是加载并且控制view的，所有的图形化界面都是由view显示的，service之所以称之为没有界面的activity是因为他不能够加载view</li>
  <li>view是不能够添加子view的 viewGroup是可以添加子view的</li>
  <li>viewGroup之所以可以添加子view是因为他实现了两个接口1.viewParent 2.viewManager</li>
  <li>一个view有且只能够有一个父view</li>
  <li>顶层的FrameLayout的实现类是Decorview，它是在phoneWindow里面创建的</li>
  <li>顶层的FrameLayout的父view是handler，handler的作用除了线程之间的通讯以外，还可以跟windowManagerService进行通讯</li>
  <li>windowManagerService是后台的一个服务，它控制并且管理者屏幕</li>
  <li>一个应用可以有很多个window，其由windowManager来管理，而windowManager又由windowManagerService来管理</li>
  <li>如果想要显示一个view那么他所要经历三个方法，1测量measure 2布局layout 3绘制draw</li>
</ul>

<h2 id="view的测量">View的测量</h2>

<ul>
  <li>measure方法它是不能够被复写的,只能够被调用,因为view中的measure方法前面加了final.</li>
  <li>如果想要在外部去获取控件的测量完成以后的宽跟高,那么getMeasuredWidth(),getMeasuredHeight().</li>
  <li>如果想在activity中的onCreat()方法中获取控件测量以后的宽跟高,那么可以用一下方法:</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 	     <span class="kd">final</span>   <span class="nc">TextView</span> <span class="n">tv_1</span> <span class="o">=</span> <span class="o">(</span><span class="nc">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">tv_1</span><span class="o">);</span>
         <span class="n">tv_1</span><span class="o">.</span><span class="na">getViewTreeObserver</span><span class="o">().</span><span class="na">addOnGlobalLayoutListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">ViewTreeObserver</span><span class="o">.</span><span class="na">OnGlobalLayoutListener</span><span class="o">()</span> <span class="o">{</span>
             <span class="nd">@Override</span>
             <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onGlobalLayout</span><span class="o">()</span> <span class="o">{</span>
                 <span class="kt">int</span> <span class="n">measuredWidth</span> <span class="o">=</span> <span class="n">tv_1</span><span class="o">.</span><span class="na">getMeasuredWidth</span><span class="o">();</span>
                 <span class="kt">int</span> <span class="n">measuredHeight</span> <span class="o">=</span> <span class="n">tv_1</span><span class="o">.</span><span class="na">getMeasuredHeight</span><span class="o">();</span>
                 <span class="nc">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="s">"===="</span><span class="o">,</span><span class="s">"width="</span><span class="o">+</span><span class="n">measuredWidth</span><span class="o">+</span><span class="s">",height="</span><span class="o">+</span><span class="n">measuredHeight</span><span class="o">);</span>
             <span class="o">}</span>
         <span class="o">});</span>
 	    </code></pre></figure>

<h4 id="关于widthmeasurespecheightmeasurespec">关于widthMeasureSpec,heightMeasureSpec</h4>
<ul>
  <li>分解</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 		 <span class="kt">int</span> <span class="n">widthMode</span> <span class="o">=</span> <span class="nc">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">widthMeasureSpec</span><span class="o">);</span>
         <span class="kt">int</span> <span class="n">widthSize</span> <span class="o">=</span> <span class="nc">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">widthMeasureSpec</span><span class="o">);</span>
         <span class="kt">int</span> <span class="n">heightMode</span> <span class="o">=</span> <span class="nc">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">heightMeasureSpec</span><span class="o">);</span>
         <span class="kt">int</span> <span class="n">heightSize</span> <span class="o">=</span> <span class="nc">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">heightMeasureSpec</span><span class="o">);</span>
 		</code></pre></figure>

<ul>
  <li>合成 <code class="highlighter-rouge">MeasureSpec.makeMeasureSpec(1080,MeasureSpec.AT_MOST);</code></li>
  <li>两个参数的合成不仅跟父view的 测量模式有关系,还跟子view的layoutParams有关系</li>
  <li>测量模式有三种</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java">	       <span class="nc">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span> <span class="c1">//精确的 matchParent 固定dip
</span>
 	       <span class="nc">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span> <span class="c1">//最多   wrapContent
</span>
 	       <span class="nc">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span><span class="c1">//自定义,未知的
</span>
	      </code></pre></figure>

<h2 id="view的布局">View的布局</h2>

<ul>
  <li>layout方法虽然可以被复写,但是不建议去复写,我们可以直接调用layout方法去确定自身的位置,而且可以去复写onLayout方法去确定子view的位置</li>
  <li>layout方法非常的直白,就是通过传进来的四个参数来判断当前控件的位置跟大小有没有发生变化</li>
</ul>

:ET