I"<h2 id="什么是jni">什么是jni？</h2>

<ul>
  <li>jni : Java native Interface java本地接口，是一个翻译，实现java和本地c/c++语言相互调用</li>
</ul>

<h2 id="为什么需要jni">为什么需要jni?</h2>
<ul>
  <li>1.操作底层硬件，android系统下传感器</li>
  <li>2.程序运行效率，图形渲染，音视频的解码</li>
  <li>3.程序数据的安全性，金融相关产品，军工相关产品，关键业务逻辑用本地代码实现</li>
  <li>4.复用成熟c/c++代码，Sqlite3,OpenGL,OpenSSL,FFmpeg,OpenCV</li>
  <li>5.复用公司之前产品的c/c++代码</li>
</ul>

<h2 id="使用jni前提">使用jni前提</h2>
<ul>
  <li>1.熟练使用java</li>
  <li>2.熟悉c语言</li>
  <li>3.熟悉jni规范</li>
  <li>4.学习开发工具NDK</li>
</ul>

<h2 id="基本数据类型">基本数据类型</h2>
<ul>
  <li>1.c语言中没有java中的boolean和byte,c逻辑真假，非0为真，把其中1代表真值，0为假</li>
  <li>2.java中char ， long比c中类型大</li>
</ul>

<h2 id="内存的特点">内存的特点</h2>
<blockquote>
  <p>内存最小单元：一个字节byte , 1byte = 8bits
内存的单元排列：一维线性连续
32位cpu，32位操作系统上，每个进程，每个进程拥有4G大小的可用内存范围
存储大小：32根地址线（引脚），对应32位二进制数，产生出2^32不同的数</p>
</blockquote>

<figure class="highlight"><pre><code class="language-text" data-lang="text">	 1byte = 8bits
 	1K = 1024 bytes									2^10
 	1M = 1024K = 1024 * 1024 bytes					2^20
 	1G = 1024M = 1024 * 1024 * 1024 bytes			2^30
 	4G = 2^32
 
	</code></pre></figure>

<h2 id="指针">指针</h2>
<ul>
  <li>内存单元的地址：每个内存单元的唯一编号</li>
  <li>在c语言中把内存单元的地址称为指针</li>
</ul>

<h2 id="指针的作用">指针的作用</h2>
<ul>
  <li>利用指针访问内存</li>
  <li>//&amp;i</li>
  <li>取地址运算符		&amp;	获得变量的首地址（编号）
*&amp;i</li>
  <li>取对象运算符		*	根据内存地址取内存中数据</li>
</ul>

<h2 id="指针变量">指针变量</h2>
<ul>
  <li>
    <p>变量按功能分两类：普通变量，保存数值数据;指针变量，保存变量的地址（内存单元的编号）</p>
  </li>
  <li>普通变量定义：数据类型 变量名;	int i; char a = ‘i’;</li>
  <li>指针变量定义：数据类型 *指针变量名; *是类型标志		int *p;</li>
</ul>

<h3 id="含义">含义</h3>
<ol>
  <li>两个运算数：乘法		a * b</li>
  <li>定义指针变量：指针类型标志		char *p;</li>
  <li>除了定义指针变量之外：取对象运算符  *p 根据p保存地址，取对应内存单元的内容</li>
</ol>

<h3 id="指针-1">指针</h3>
<ul>
  <li>把变量的地址，指针变量通称为指针</li>
</ul>

<h2 id="指针的指向">指针的指向</h2>
<ul>
  <li>指针变量保存一个对应类型变量的地址，指针变量指向这个变量，指向这个变量可以通指针运算符访问变量</li>
</ul>

<h2 id="指针相关的类型">指针相关的类型</h2>
<ul>
  <li>指针的数据类型：int 是指针指向对象类型，决定指针变量利用取对象运算符访问内存时一次访问几个字节</li>
  <li>指针类型：int * 指针类型</li>
</ul>

<h2 id="指针使用时的错误">指针使用时的错误</h2>
<ul>
  <li>
    <p>1.指针类型不匹配</p>

    <p>int a = 100;
  char *p;
  int *pa;
  p = &amp;a;//指针类型不匹配，访问内存方式不同</p>
  </li>
  <li>
    <p>2.野指针：指针没有合法的指向，建议给NULL，读写一定报错，必须先获得合法指向才能使用</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-c" data-lang="c"> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 
 <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span><span class="c1">//在栈变量未赋初值，初值不能确定 
</span>
 <span class="kt">int</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span><span class="c1">//野指针 指针没有合法的指向 
</span>
 <span class="kt">int</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span><span class="c1">//NULL读写一定报错，必须先获得合法指向才能使用 
</span>
 <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
 <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span></code></pre></figure>

<h2 id="二级指针">二级指针</h2>
<ul>
  <li>
    <p>int i = 10;			变量名i访问其申请的内存
普通变量：保存数值数据</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">int *p = &amp;i;</code>		指针变量p指向变量i				<code class="highlighter-rouge">*p &lt;=&gt; i</code>
一级指针变量：保存普通变量地址</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">int * *pp = &amp;p;</code>
二级指针变量：保存一级指针变量的地址						<code class="highlighter-rouge">*pp &lt;=&gt; p</code>		<code class="highlighter-rouge">**pp &lt;=&gt; *p &lt;=&gt; i</code></p>
  </li>
</ul>

<h2 id="指针的运算">指针的运算</h2>

<ul>
  <li>指针ptr加整数N <code class="highlighter-rouge">ptr + N * sizeof</code>(对象类型) ptr向高地址方向移动N个对象</li>
  <li>指针ptr减整数N <code class="highlighter-rouge">ptr - N * sizeof</code>(对象类型) ptr向低地址方向移动N个对象</li>
</ul>

<h2 id="数组">数组</h2>
<ul>
  <li>相同数据类型变量的集合，变量在内存中连续</li>
</ul>

<h3 id="怎样定义数组">怎样定义数组</h3>

<figure class="highlight"><pre><code class="language-c" data-lang="c">	 <span class="c1">//数据类型 数组名[数组元素个数常量];
</span>
 	<span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="c1">// arr[0] arr[1] arr[2] 		~ arr[5]
</span>
	</code></pre></figure>

<h3 id="数组的特点">数组的特点</h3>
<ul>
  <li>1.数组名代表数组首元素首地址	arr 代表 &amp;arr[0]</li>
  <li>2.数组定义要求个数确定，个数需要是常量，</li>
  <li>3.c语言不检查数组下标越界</li>
  <li>4.计算数组元素个数：sizeof(arr) / sizeof(arr[0])</li>
</ul>
:ET